<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security 
   http://www.springframework.org/schema/security/spring-security-4.2.xsd
   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

   <!-- Namespaces탭 : security 체크후 선택 > 오른쪽 4.2 버전 선택 -->
   <security:http pattern="/resources/**" security="none" />
   <security:http pattern="/common/**" security="none" />
   <security:http auto-config="true" use-expressions="true" create-session="never">
      
      <!-- 관리자 권한 영역 -->
     <security:intercept-url pattern="/**.ad" access="hasRole('ROLE_ADMIN', 'ROLE_ATTEND', 'ROLE_APPROVAL', 'ROLE_SECURE'
     , 'ROLE_DEPARTMENT', 'ROLE_SERVICE', 'ROLE_HUMAN', 'ROLE_BOARD', 'ROLE_NOTEBOX' )" />
      
      <!-- 권한에 관계없이 접속 가능영역(guest도 접속 가능)  -->
      <security:intercept-url pattern="/**.co" access="permitAll" />
      
   
      <!-- 로그인한 사용자 영역(customer + 관리자) : id가 pk이므로 hasRole을 주면 admin권한 또는 user 권한 1개밖에 부여할 수 없다. 따라서 hasAnyRole을 준다.-->
      <security:intercept-url pattern="/**.ad" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER', 'ROLE_ATTEND', 'ROLE_APPROVAL', 'ROLE_SECURE'
     , 'ROLE_DEPARTMENT', 'ROLE_SERVICE', 'ROLE_HUMAN', 'ROLE_BOARD', 'ROLE_NOTEBOX' )" />     
     
      <security:intercept-url pattern="/**.ap" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER', 'ROLE_ATTEND', 'ROLE_APPROVAL', 'ROLE_SECURE'
     , 'ROLE_DEPARTMENT', 'ROLE_SERVICE', 'ROLE_HUMAN', 'ROLE_BOARD', 'ROLE_NOTEBOX' )" />
          
      <security:intercept-url pattern="/**.ar" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER', 'ROLE_ATTEND', 'ROLE_APPROVAL', 'ROLE_SECURE'
     , 'ROLE_DEPARTMENT', 'ROLE_SERVICE', 'ROLE_HUMAN', 'ROLE_BOARD', 'ROLE_NOTEBOX' )" />
          
      <security:intercept-url pattern="/**.at" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER', 'ROLE_ATTEND', 'ROLE_APPROVAL', 'ROLE_SECURE'
     , 'ROLE_DEPARTMENT', 'ROLE_SERVICE', 'ROLE_HUMAN', 'ROLE_BOARD', 'ROLE_NOTEBOX' )" />
          
      <security:intercept-url pattern="/**.bo" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER', 'ROLE_ATTEND', 'ROLE_APPROVAL', 'ROLE_SECURE'
     , 'ROLE_DEPARTMENT', 'ROLE_SERVICE', 'ROLE_HUMAN', 'ROLE_BOARD', 'ROLE_NOTEBOX' )" />
          
      <security:intercept-url pattern="/**.ca" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER', 'ROLE_ATTEND', 'ROLE_APPROVAL', 'ROLE_SECURE'
     , 'ROLE_DEPARTMENT', 'ROLE_SERVICE', 'ROLE_HUMAN', 'ROLE_BOARD', 'ROLE_NOTEBOX' )" />
          
      <security:intercept-url pattern="/**.ch" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER', 'ROLE_ATTEND', 'ROLE_APPROVAL', 'ROLE_SECURE'
     , 'ROLE_DEPARTMENT', 'ROLE_SERVICE', 'ROLE_HUMAN', 'ROLE_BOARD', 'ROLE_NOTEBOX' )" />
          
      <security:intercept-url pattern="/**.fo" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER', 'ROLE_ATTEND', 'ROLE_APPROVAL', 'ROLE_SECURE'
     , 'ROLE_DEPARTMENT', 'ROLE_SERVICE', 'ROLE_HUMAN', 'ROLE_BOARD', 'ROLE_NOTEBOX' )" />
          
      <security:intercept-url pattern="/**.me" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER', 'ROLE_ATTEND', 'ROLE_APPROVAL', 'ROLE_SECURE'
     , 'ROLE_DEPARTMENT', 'ROLE_SERVICE', 'ROLE_HUMAN', 'ROLE_BOARD', 'ROLE_NOTEBOX' )" />     
      <!-- 로그인폼 -->
      <security:form-login login-page="/login.co"
                  login-processing-url="/login_action.co" 
                  authentication-success-handler-ref="userLoginSuccessHandler"
                  authentication-failure-handler-ref="userLoginFailureHandler"
                  username-parameter="id" password-parameter="pwd" />
      <security:session-management>
         <!-- 같은 브라우저에서 여러창 동시접속수 / 세션만료시 이동할 주소 / 최대 세션 초과시 에러 옵션-->
         <security:concurrency-control max-sessions="10" 
            expired-url="/login.co"
            error-if-maximum-exceeded="false"
         />
      </security:session-management>
      
      <!-- 접근 권한이 없는 경우 작동 -->
      <security:access-denied-handler ref="userDeniedHandler" />
   </security:http>
   
   <!-- 로그인 성공시 작동 -->
   <bean id="userLoginSuccessHandler" class="com.spring.tutorial.service.security.UserLoginSuccessHandler">
      <constructor-arg name="sqlSession" ref="sqlSession" /> 
   </bean>
   
   <!-- 로그인 실패시 작동 -->
   <bean id="userLoginFailureHandler" class="com.spring.tutorial.service.security.UserLoginFailureHandler">
      <constructor-arg name="sqlSession" ref="sqlSession" />
      <constructor-arg name="passwordEncoder" ref="bCryptPasswordEncoder" />
   </bean>
   
   <!-- 접근 권한이 없는 경우 작동 -->
   <bean id="userDeniedHandler" class="com.spring.tutorial.service.security.UserDeniedHandler" />
   
   <!-- 로그인 인증처리 클래스 -->
   <!-- login-processing-url="/loginAction.do"에 의해 자동호출하므로 우리가 작성한 loginAction.do는 주석처리  -->
   <bean id="userService" class="com.spring.tutorial.service.security.UserAuthenticationService">
      <constructor-arg name="sqlSession" ref="sqlSession" /> 
   </bean>
   
   <!-- 비밀번호 암호화 클래스 -->
   <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

</beans>